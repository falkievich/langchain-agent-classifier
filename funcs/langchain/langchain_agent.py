from typing import Any, Dict

from dotenv import load_dotenv

from langchain.agents import initialize_agent, AgentType
from langchain.schema import SystemMessage

# LLM custom
from classes.custom_llm_classes import CustomOpenWebLLM

# Importar tools wrappers
from tools_wrappers.abogado_wrappers import make_abogado_tools
from tools_wrappers.expediente_wrappers import make_expediente_tools
from tools_wrappers.persona_legajo_wrappers import make_persona_legajo_tools
from tools_wrappers.dependencias_wrappers import make_dependencias_tools
from tools_wrappers.materia_delitos_wrappers import make_materia_delitos_tools
from tools_wrappers.radicacion_wrappers import make_radicacion_tools
from tools_wrappers.arrays_wrappers import make_arrays_tools

# ------------ Cargar el archivo .env ------------ 
load_dotenv()

# ----------------- LLM -----------------
llm = CustomOpenWebLLM()

# ----------------- Prefix (antes era system_msg en select_tools) -----------------
AGENT_PREFIX = """
Eres un agente que debe invocar una o varias funciones Python para satisfacer la peticiÃ³n del usuario.

REGLAS DE USO Y FORMATO (OBLIGATORIAS):
â€” Responde SOLO con llamadas vÃ¡lidas de funciones.
â€” Usa SOLO argumentos posicionales. NO uses nombres de parÃ¡metros.
   Correcto: resolver_por_delito('hurto agravado')
   Incorrecto: resolver_por_delito(query='hurto agravado')
â€” Si la funciÃ³n no requiere argumentos, invÃ³cala con parÃ©ntesis vacÃ­os. Ej.: listar_todos_los_abogados()
â€” Para mÃºltiples valores, invoca la MISMA funciÃ³n varias veces, una por cada valor.

ARGUMENTOS REQUERIDOS vs. FUENTES:
â€” NUNCA pases literales como 'pdf', 'archivo', 'documento', 'adjunto', 'json', 'csv', 'xlsx', 'excel',
'contenido del pdf', 'texto del pdf' como argumentos. Esos tÃ©rminos describen la FUENTE (de dÃ³nde provienen los datos),
no el VALOR que consumen las funciones.
â€” Si el usuario NO proporciona un argumento concreto para una bÃºsqueda (p.ej., solo menciona un archivo),
usa la funciÃ³n de LISTADO del dominio.
  Ejemplos:
   â€¢ 'Â¿quÃ© delito hay en este pdf?'  ->  listar_todos_los_delitos()
   â€¢ 'mostrame las radicaciones de este json'  ->  listar_todas_las_radicaciones_y_movimiento_expediente()
   â€¢ 'ver dependencias en este csv'  ->  listar_todas_las_dependencias()

FORMATO DE FECHAS (OBLIGATORIO):
â€” Siempre convierte cualquier fecha que mencione el usuario al formato ISO corto: AAAA-MM-DD.
   Ejemplos:
   â€¢ '21.03.2025'  ->  '2025-03-21'
   â€¢ '21/03/2025'  ->  '2025-03-21'
   â€¢ '21 de marzo de 2025'  ->  '2025-03-21'
   â€¢ 'marzo 21 2025'  ->  '2025-03-21'
â€” Si la fecha incluye hora o zona horaria, IGNÃ“RALA y conserva solo AAAA-MM-DD.
"""

# ----------------- Prefix -----------------
AGENT_PREFIX = """ ... """   # <-- lo de mi prompt

# ----------------- Ejecutor -----------------
def run_agent_with_tools(json_data: Dict[str, Any], user_prompt: str) -> Dict[str, Any]:
    """
    Ejecuta el agente con las Tools y devuelve el resultado en JSON.
    """
    print("\n==================== NUEVA EJECUCIÃ“N ====================")
    print("Prompt del usuario:", user_prompt)
    print("----------------------------------------------------------")

    # Construir Tools dinÃ¡micamente
    tools = (
        make_abogado_tools(json_data)
        + make_expediente_tools(json_data)
        + make_persona_legajo_tools(json_data)
        + make_dependencias_tools(json_data)
        + make_materia_delitos_tools(json_data)
        + make_radicacion_tools(json_data)
        + make_arrays_tools(json_data)
    )

    # ðŸ”¹ Mostrar lista de Tools que recibe el LLM
    print("\n--- TOOLS DISPONIBLES ---")
    for tool in tools:
        print(f"â†’ {tool.name}: {tool.description}")

    print("==========================================================\n")

    # ConstrucciÃ³n del agente
    agent = initialize_agent(
        tools=tools,
        llm=llm,
        agent_type=AgentType.OPENAI_FUNCTIONS,
        verbose=True,
        agent_kwargs={"extra_prompt_messages": [SystemMessage(content=AGENT_PREFIX)]},
    )

    return agent.invoke(user_prompt)
